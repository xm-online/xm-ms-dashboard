import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
    }
}

plugins {
    id "java"
    id "groovy"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "io.spring.nohttp"
    id "org.sonarqube"
    id "checkstyle"
    id "war"
    id "com.github.spotbugs"
    id "io.spring.dependency-management" version '1.1.4'
    id "pmd"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

group = "com.icthh.xm.ms.dashboard"

description = ""

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

assert System.properties["java.specification.version"] == "21"

apply from: "gradle/docker.gradle"
apply from: "gradle/version.gradle"

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

sourceSets {
    test {
        groovy {
            srcDirs += ['src/test/lep']
        }
    }
    main {
        groovy {
            srcDirs += ['src/main/lep']
        }
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "com.icthh.xm.ms.dashboard.DashboardApp"
}

bootWar {
    mainClass = "com.icthh.xm.ms.dashboard.DashboardApp"
    manifest {
        attributes(
            "Implementation-Version": archiveVersion
        )
    }
}

String[] testCategories = ['com.icthh.xm.ms.dashboard.AbstractSpringBootTest',
                           'com.icthh.xm.ms.dashboard.AbstractUnitTest']

Closure testLoggingConf = {
    exceptionFormat = 'full'
    events "passed", "skipped", "failed"//, "standardError" //, "standardOut"
}

test {

    doFirst {
        println '!!! ATTENTION: start execution of non-categorized tests. it may impact test performance !!!'
    }

    dependsOn 'clean', 'runCategorizedTests'
    classes.mustRunAfter 'clean'
    systemProperty "spring.profiles.active", "test"
    mkdir("src/test/features")
    include '**/*UnitTest*'
    include '**/*IntTest*'

    // to run all test that was not categorized
    useJUnit {
        excludeCategories(testCategories)
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = true
    testLogging testLoggingConf

    doLast {
        println '!!! ATTENTION: check if there are non-categorized tests !!!'
    }

}

task runCategorizedTests(type: Test) {
    useJUnitPlatform {
        includeTags(testCategories)
    }
    testLogging testLoggingConf
}

task testReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(test)
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion "${checkstyleToolVersion}"
    configFile file("qa/checkstyle.xml")
    checkstyleTest.enabled = false
}

spotbugs {
    toolVersion = "${spotbugsToolVersion}"
    ignoreFailures = true
}

pmd {
    toolVersion "${pmdToolVersion}"
    ignoreFailures = true
}

nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
    all {
        resolutionStrategy {
            // Inherited version from Spring Boot can't be used because of regressions:
            // To be removed as soon as spring-boot use the same version
        }
    }
}

repositories {
    // Local maven repository is required for libraries built locally with maven like development jhipster-bom.
    mavenLocal()
    mavenCentral()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {

    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"

    implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
    implementation group: "tech.jhipster", name: "jhipster-framework"

    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "org.hibernate.orm:hibernate-core:${hibernateVersion}"
    implementation "com.zaxxer:HikariCP"
    implementation "org.apache.commons:commons-lang3"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"
    implementation "org.hibernate.orm:hibernate-envers:${hibernateVersion}"


    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"

    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"

    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-discovery"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-config"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"

    implementation "io.swagger:swagger-annotations:${swaggerVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocOpenapiVersion}"
    implementation ("io.springfox:springfox-swagger2:3.0.0") {
        exclude module: "mapstruct"
    }

    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-observation'
    implementation "io.micrometer:micrometer-tracing-bridge-brave"
    implementation "org.postgresql:postgresql"

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    implementation("com.icthh.xm.commons:xm-commons-ms-web:${xm_commons_version}") {
        exclude group: "io.github.jhipster", module: "jhipster-framework"
    }
    implementation "com.icthh.xm.commons:xm-commons-lep:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-lep-groovy:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-lep-js:${xm_commons_version}" // optional
    implementation "com.icthh.xm.commons:xm-commons-tenant-endpoint:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-i18n:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-timeline:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-cache:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-migration-db:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-permission:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-scheduler:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-metric:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-topic:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-logging-configurable:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-logging-trace:${xm_commons_version}"

    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    testImplementation "com.h2database:h2"
    developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "8.9"
}

compileJava {
    dependsOn processResources
    // add method parameters names to .class (used by LEP scripts)
    options.compilerArgs << '-parameters'
}
compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
